"""
Django settings for queequeg project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import subprocess
from dotenv import load_dotenv

# Configura a variável de ambiente GDAL_DATA se ainda não estiver definida
def configure_gdal_data():
    if 'GDAL_DATA' not in os.environ:
        # Tenta localizar o diretório de dados do GDAL usando gdal-config
        try:
            gdal_data = subprocess.check_output(['gdal-config', '--datadir'], text=True).strip()
            os.environ['GDAL_DATA'] = gdal_data
            # print(f"GDAL_DATA configurado para: {gdal_data}") # Opcional: para depuração
        except (subprocess.CalledProcessError, FileNotFoundError):
            # Fallback: permite que o GDAL encontre seu próprio diretório de dados
            # print("Não foi possível encontrar gdal-config ou GDAL_DATA não definido. Deixando o GDAL lidar com isso.") # Opcional: para depuração
            pass

# Chama a função de configuração durante a inicialização das configurações
configure_gdal_data()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Carregar variáveis de ambiente do arquivo .env
load_dotenv()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# (!) Trocar chave secreta hard-coded e carregá-la de uma .env
# Carregar SECRET_KEY da variável de ambiente DJANGO_SECRET_KEY, com fallback para a chave atual
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'a-mais-famosissima-chave-secreta-com-outdoor-apontando-para-ela-com-nome-sobrenome-cpf-e-rg')

# SECURITY WARNING: don't run with debug turned on in production!
# Carregar DEBUG da variável de ambiente DJANGO_DEBUG, padrão True para desenvolvimento
DEBUG = os.environ.get('DJANGO_DEBUG', 'True').lower() == 'true'

# Carregar ALLOWED_HOSTS da variável de ambiente DJANGO_ALLOWED_HOSTS (lista separada por vírgulas)
ALLOWED_HOSTS_STR = os.environ.get('DJANGO_ALLOWED_HOSTS', '')

if ALLOWED_HOSTS_STR:
    # Se a variável de ambiente estiver definida, use os hosts especificados
    ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_STR.split(',')]
elif DEBUG:
    # Se DEBUG for True e a variável de ambiente não estiver definida, use o fallback para desenvolvimento
    ALLOWED_HOSTS = ['localhost', '127.0.0.1']
else:
    # Se DEBUG for False e a variável de ambiente não estiver definida, use uma lista vazia (segurança em produção)
    ALLOWED_HOSTS = []

# Configurações do OSMnx 
# São apenas para consultos padrões. Dito isso, o map_utils deve se encarregar de baixar grafos na hora.
# Isso vai ser um esculacho no servidor. Contudo, se necessário, será desativado.
OSMNX_PLACE_PREFIX = os.environ.get('OSMNX_PLACE_PREFIX', 'marica') # Utilizar 'marica' como padrão
OSMNX_PLACE_QUERY = os.environ.get('OSMNX_PLACE_PREFIX', 'Maricá, RJ, Brazil') # 'Maricá, RJ, Brazil' como padrão

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders', # CORS headers
    'rest_framework', # oops, esqueci de adicionar isso
    'pequod.apps.PequodConfig' # Nome do aplicativo de rotas

]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', # Middleware for handling CORS
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'queequeg.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'queequeg.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Obrigado, Copilot.
CORS_ALLOWED_ORIGINS_STR = os.environ.get('DJANGO_CORS_ALLOWED_ORIGINS', '')
if CORS_ALLOWED_ORIGINS_STR:
    CORS_ALLOWED_ORIGINS = [origin.strip() for origin in CORS_ALLOWED_ORIGINS_STR.split(',')] # Esse negócio é muito tenebroso, aliás.
else:
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:5173", # Porta do servidor de desenvolvimento do Vite
        "http://127.0.0.1:5173",
        "http://localhost:8888",
        "http://127.0.0.1:8888",
    ]

CSRF_TRUSTED_ORIGINS_STR = os.environ.get('DJANGO_CSRF_TRUSTED_ORIGINS', '')
if CSRF_TRUSTED_ORIGINS_STR:
    CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in CSRF_TRUSTED_ORIGINS_STR.split(',')]
else:
    CSRF_TRUSTED_ORIGINS = [
        "http://localhost:5173",
        "http://127.0.0.1:5173",
        "http://localhost:8888",
        "http://127.0.0.1:8888",
    ]